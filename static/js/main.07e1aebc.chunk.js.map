{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","process","App","React","useState","query","setQuery","weather","setWeather","dateObject","Date","dateInfo","day","getDate","dayOfWeek","getDay","month","getMonth","year","getFullYear","todayIs","className","name","main","temp","chooseBack","type","onChange","e","target","value","placeholder","onKeyPress","event","key","fetch","then","res","json","result","sys","country","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wKAEMA,EACCC,mCADDD,EAEE,2CAwGOE,MApGf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEiBH,IAAMC,SAAS,IAFhC,mBAENG,EAFM,KAEGC,EAFH,KAcPC,EAAa,IAAIC,KAEjBC,EAAW,CACfC,IAAKH,EAAWI,UAChBC,UAAWL,EAAWM,SACtBC,MAAOP,EAAWQ,WAClBC,KAAMT,EAAWU,eA4BbC,EAAO,UAVA,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGsBT,EAASG,WAApB,aAzBE,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAaqDH,EAASK,OAAnD,YAA6DL,EAASC,KAanF,OACE,yBAAKS,UAZY,SAAAd,GACjB,MAA0B,oBAAhBA,EAAQe,KACbf,EAAQgB,KAAKC,KAAO,GACd,WAEA,MAGF,WAIOC,CAAWlB,IACzB,8BACE,yBAAKc,UAAU,cACb,2BACAA,UAAU,aACVK,KAAK,OACLC,SAAY,SAAAC,GAAC,OAAItB,EAASsB,EAAEC,OAAOC,QACnCA,MAASzB,EACT0B,YAAY,gCACZC,WAnEO,SAAAC,GACI,UAAdA,EAAMC,KACPC,MAAM,GAAD,OAAInC,EAAJ,qBAAyBK,EAAzB,iCAAuDL,IACzDoC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ/B,EAAW+B,UAkEY,oBAAhBhC,EAAQgB,KACjB,6BACE,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,YACZd,EAAQe,KADX,KACmBf,EAAQiC,IAAIC,SAE/B,yBAAKpB,UAAU,QACZD,GAEH,yBAAKC,UAAU,eACb,yBAAKA,UAAU,QACZqB,KAAKC,MAAMpC,EAAQgB,KAAKC,MAD3B,SAGA,yBAAKH,UAAU,WACZd,EAAQA,QAAQ,GAAGgB,SAKrB,MC1FKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.07e1aebc.chunk.js","sourcesContent":["import React from 'react';\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nfunction App() {\n  const [query, setQuery] = React.useState('');\n  const [weather, setWeather] = React.useState({});\n\n  const search = event => {\n    if(event.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n        })\n    }\n  };\n\n  const dateObject = new Date();\n\n  const dateInfo = {\n    day: dateObject.getDate(),\n    dayOfWeek: dateObject.getDay(),\n    month: dateObject.getMonth(),\n    year: dateObject.getFullYear()\n  };\n  \n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n  ]\n\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\", \n    \"Saturday\",\n  ]\n\n  const todayIs = `${days[dateInfo.dayOfWeek]}, ${months[dateInfo.month]} ${dateInfo.day}`;\n  \n  const chooseBack = weather => {\n    if(typeof weather.name != \"undefined\") {\n      if(weather.main.temp > 55)\n        return \"App-warm\";\n      else\n        return \"App\";\n    }\n    else\n      return \"App-warm\";\n  };\n\n  return (\n    <div className={chooseBack(weather)}>\n      <main>\n        <div className=\"search-box\">\n          <input \n          className=\"search-bar\"\n          type=\"text\"\n          onChange = {e => setQuery(e.target.value)}\n          value = {query}\n          placeholder=\"Enter City, State, or Country\"\n          onKeyPress={search}\n          >\n          </input>\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n            <div className=\"location\">\n              {weather.name}, {weather.sys.country}\n            </div>\n            <div className=\"date\">\n              {todayIs}\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°F\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].main}\n              </div>\n            </div>\n          </div>\n          </div>\n          ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}